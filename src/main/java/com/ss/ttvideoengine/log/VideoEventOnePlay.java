package com.ss.ttvideoengine.log;

import android.text.TextUtils;
import com.ss.android.vc.meeting.framework.meeting.IByteRtcError;
import com.ss.ttvideoengine.utils.TTVideoEngineLog;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import org.json.JSONObject;

public class VideoEventOnePlay {
    public long a_dec_opened_t;
    public long a_dec_start_t;
    public long a_dns_start_t;
    public long a_render_f_t;
    public int ae_type;
    public String apiString;
    public int apiver;
    public int apiverFinal;
    public int asyncCodecId;
    public int asyncInit;
    public long at;
    public int audioBufferLength;
    public long audioDeviceOpenedTime;
    public long audioDeviceStartTime;
    public long audioDnsT;
    public long audioTranConnectT;
    public long audioTranFirstPacketT;
    public String auth;
    public long avformat_open_t;
    public int bc;
    public long bft;
    public long bitrate;
    public int br;
    public long bufferAccuT;
    public int bufferSeconds;
    public int checkHijack;
    public String chipBoardName;
    public String chipHardwareName;
    public long clockDiff;
    public int codecPool;
    public int color_trc;
    public float containerFps;
    public int core_volume;
    public int curAudioDecodeError;
    public long curPlayBackTime;
    public int curVideoDecodeError;
    public int curVideoDecoderFps;
    public float curVideoOutputFps;
    public int curVideoRenderError;
    public int customP2PCDNType;
    public long d_apls;
    public long d_vpls;
    public long dec_create_t;
    public long decodeFirstAudioFrameT;
    public long decodeFirstVideoFrameT;
    public long decoderBufferAccuT;
    public long demuxer_begin_t;
    public long demuxer_create_t;
    public String df;
    public int disableAccurateStart;
    public int dnsModule;
    public long dnsT;
    public long dns_end_t;
    public String dns_server_ip;
    public long dns_start_t;
    public int dropCount;
    public int enableBash;
    public int enableMDL;
    public int enableMask;
    public int enableMaskThread;
    public int enableSharp;
    public int enableSub;
    public int enableSubThread;
    public String encryptKey;
    public int engineState;
    public int errc;
    public int errt;
    public long et;
    public Map ex;
    public int fetchedAndLeaveByUser;
    public int finish;
    public long firstBufferEndT;
    public long firstBufferStartT;
    public double firstFrameSpeed;
    public int firstHijackCode;
    public long firstRangeSize;
    public int first_errc;
    public int first_errc_internal;
    public int first_errt;
    public long formater_create_t;
    public int height;
    public int hijack;
    public int hijackRetry;
    public long httpResponseT;
    public int hwCodecException;
    public String hwCodecName;
    public String internalIP;
    public int isColdStart;
    public int isDisableShortSeek;
    public int isPreferNearestSample;
    public int isReplay;
    public int isStartPlayAutomatically;
    public long lastBufferEndT;
    public long lastBufferStartT;
    public int lastHijackCode;
    public long lastResolutionEndT;
    public long lastResolutionStartT;
    public long lastSeekEndT;
    public int lastSeekPosition;
    public long lastSeekStartT;
    public int leave_block_t;
    public int leave_method;
    public int leave_reason;
    public String lf;
    public String loaderType;
    public String log_id;
    public int loopcount;
    public long lt;
    public ArrayList<String> mAVBadInterlacedList;
    public int mAVOutsyncCount;
    public ArrayList<String> mAVOutsyncList;
    public int mAudioCodecProfile;
    public String mAudioInitUrl;
    public boolean mAudioStreamDisabled;
    public long mAudioStreamDuration;
    public Map<String, Integer> mBitrateList;
    public ArrayList<String> mBrightList;
    public int mBufferTimeout;
    public ArrayList<Integer> mCatowerRttList;
    public ArrayList<Integer> mCatowerRttMsList;
    public ArrayList<Integer> mChargingList;
    public long mCustomClickT;
    public long mCustomGetVideoModelT;
    public long mCustomInitEngineT;
    public long mCustomPlayEngineT;
    public long mCustomPlayT;
    public String mCustomStr;
    public int mEnableNNSR;
    public ArrayList<String> mErrorList;
    public Map mFeatures;
    public ArrayList mForebackSwitchList;
    public int mFramesSetDropNum;
    public int mHardwareConfType;
    public ArrayList<String> mHeadsetStateList;
    public String mInitialHost;
    public String mInitialIP;
    public String mInitialQuality;
    public String mInitialResolution;
    public String mInitialURL;
    public boolean mIsEngineReuse;
    public int mIsViewHidden;
    public String mLastSessionID;
    public ArrayList<String> mLoopList;
    public ArrayList<String> mMDLRetryList;
    public String mMaskURL;
    public ArrayList<Float> mMdlMultiSpeedList;
    public int mNetQualityIndex;
    public int mNetQualityInterval;
    public int mNetworkScore;
    public Map<String, String> mNetworkTypeList;
    public ArrayList<String> mNoAudioRenderList;
    public ArrayList<String> mNoVideoRenderList;
    public ArrayList<String> mPauseList;
    public int mPixelDensity;
    public ArrayList<String> mPlayList;
    public ArrayList<String> mPlaySpeedList;
    public ArrayList<Integer> mPowerList;
    public int mPreRangeOff;
    public Map<String, String> mQualityList;
    public int mRadioMode;
    public ArrayList<String> mRadiomodeList;
    public int mReadCacheMode;
    public ArrayList<String> mRebufList;
    public ArrayList<String> mResolutionList;
    public int mScreenHeight;
    public int mScreenWidth;
    public ArrayList<String> mSeekList;
    public String mSessionID;
    public Map<String, String> mSignalStrengthList;
    public float mSrHeightFactor;
    public float mSrWidthFactor;
    public String mSubError;
    public String mSubReqURL;
    public int mVideoCodecProfile;
    public ArrayList<String> mVideoFilterList;
    public int mVideoHWErrReason;
    public boolean mVideoStreamDisabled;
    public long mVideoStreamDuration;
    public ArrayList<String> mViewSizeList;
    public int maskErrc;
    public Map maskEvents;
    public long mask_open_t;
    public long mask_opened_t;
    public long mdatPos;
    public int mediaCodecRender;
    public Map merror;
    public long modelVersion;
    public long moovPos;
    public int mute;
    public String netClient;
    public long netSpeedLevel;
    public int netWorkTryCount;
    public int networkTimeout;
    public long outlet_create_t;
    public String ownPlayerCreateException;
    public String p2pLoadInfo;
    public int p2pStragetyMinPlayNum;
    public int p2pStragetyMinSpeed;
    public int p2pStragetyPlayNum;
    public int p2pStragetyProbeSpeed;
    public String p2pUrl;
    public double playEndSpeed;
    public long playPreparedT;
    public long playStartedT;
    public long playbackBufferEndT;
    public long playbackBufferStartT;
    public Map playbackparams;
    public long playerFirstFrameT;
    public long player_created_t;
    public long player_prepared_time;
    public int pluginException;
    public long prepare_before_play_t;
    public long prepare_end_time;
    public long prepare_start_time;
    public String proxy_url;
    public long ps_t;
    public long pt;
    public long pt_new;
    public long receiveFirstAudioFrameT;
    public long receiveFirstVideoFrameT;
    public String render_type;
    public int seekCount;
    public int seek_accu_t;
    public long server_local_diff;
    public long setds_t;
    public int startTime;
    public Map subEvents;
    public int subIdsCount;
    public int subLanSwichCount;
    public long sub_load_finish_t;
    public long sub_req_finish_t;
    public String surfaceCode;
    public long surfaceSetTime;
    public int switchResolutionCount;
    public int textureRender;
    public int textureRenderErrorCode;
    public String textureRenderErrorMsg;
    public String traceID;
    public long tranConnectT;
    public long tranFirstPacketT;
    public int useVideoModelCache;
    public long v_dec_opened_t;
    public long v_dec_start_t;
    public long v_render_f_t;
    public int vds;
    public Map vidInfo;
    public long videoAudioGap;
    public int videoBufferLength;
    public long videoDeviceOpenedTime;
    public long videoDeviceStartTime;
    public int video_preload_size;
    public int volume;
    public long vpls;
    public int vps;
    public int vsc;
    public String vscMessage;
    public long vt;
    public ArrayList vu;
    public int watchduration;
    public int width;

    public JSONObject toJsonObject(VideoEventBase videoEventBase) {
        if (videoEventBase == null) {
            return null;
        }
        HashMap hashMap = new HashMap();
        if (this.vt <= 0) {
            parseLeaveReason(videoEventBase);
        }
        putToMap(hashMap, "player_sessionid", this.mSessionID);
        putToMap(hashMap, "log_type", "video_playq");
        putToMap(hashMap, "sdk_version", videoEventBase.sdk_version);
        putToMap((Map) hashMap, "plugin_exception", this.pluginException);
        putToMap(hashMap, "sv", videoEventBase.sv);
        putToMap(hashMap, "pv", videoEventBase.pv);
        putToMap(hashMap, "pc", videoEventBase.pc);
        putToMap(hashMap, "ffv", videoEventBase.ffmpeg_version);
        putToMap(hashMap, "vcnv", videoEventBase.libvcn_version);
        putToMap(hashMap, "trv", videoEventBase.texturender_version);
        putToMap(hashMap, "prldv", videoEventBase.preload_version);
        putToMap(hashMap, "abrv", videoEventBase.abr_version);
        putToMap(hashMap, "prdtv", videoEventBase.predict_version);
        putToMap(hashMap, "v", videoEventBase.mVid);
        putToMap((Map) hashMap, "play_type", videoEventBase.mPlayType);
        putToMap(hashMap, "pt", this.pt);
        putToMap(hashMap, "at", this.at);
        putToMap(hashMap, "prepare_start_time", this.prepare_start_time);
        putToMap(hashMap, "prepare_end_time", this.prepare_end_time);
        putToMap(hashMap, "play_preparedt", this.playPreparedT);
        putToMap(hashMap, "play_startedt", this.playStartedT);
        putToMap(hashMap, "vt", this.vt);
        putToMap(hashMap, "et", this.et);
        putToMap(hashMap, "lt", this.lt);
        putToMap(hashMap, "bft", this.bft);
        putToMap((Map) hashMap, "bc", this.bc);
        putToMap((Map) hashMap, "br", this.br);
        putToMap(hashMap, "vu", this.vu);
        putToMap((Map) hashMap, "vd", videoEventBase.vd);
        putToMap((Map) hashMap, "vs", videoEventBase.vs);
        putToMap((Map) hashMap, "vps", this.vps);
        putToMap((Map) hashMap, "vds", this.vds);
        putToMap((Map) hashMap, "width", this.width);
        putToMap((Map) hashMap, "height", this.height);
        putToMap((Map) hashMap, "async_init", this.asyncInit);
        putToMap((Map) hashMap, "async_codec_id", this.asyncCodecId);
        putToMap((Map) hashMap, "video_preload_size", this.video_preload_size);
        putToMap(hashMap, "df", this.df);
        putToMap(hashMap, "lf", this.lf);
        putToMap(hashMap, "codec", videoEventBase.codec_type);
        putToMap(hashMap, "render_type", this.render_type);
        putToMap(hashMap, "merror", SerialMapToString(this.merror));
        putToMap((Map) hashMap, "hijack", this.hijack);
        putToMap((Map) hashMap, "hw", videoEventBase.mVideoHW);
        putToMap((Map) hashMap, "hw_user", videoEventBase.mVideoHWUser);
        putToMap((Map) hashMap, "hw_err_reason", this.mVideoHWErrReason);
        putToMap((Map) hashMap, "audio_hw_user", videoEventBase.mAudioHwUser);
        putToMap(hashMap, "dns_t", this.dnsT);
        putToMap(hashMap, "tran_ct", this.tranConnectT);
        putToMap(hashMap, "tran_ft", this.tranFirstPacketT);
        putToMap(hashMap, "a_dns_t", this.audioDnsT);
        putToMap(hashMap, "a_tran_ct", this.audioTranConnectT);
        putToMap(hashMap, "a_tran_ft", this.audioTranFirstPacketT);
        putToMap(hashMap, "re_f_videoframet", this.receiveFirstVideoFrameT);
        putToMap(hashMap, "de_f_videoframet", this.decodeFirstVideoFrameT);
        putToMap(hashMap, "re_f_audioframet", this.receiveFirstAudioFrameT);
        putToMap(hashMap, "de_f_audioframet", this.decodeFirstAudioFrameT);
        putToMap(hashMap, "bu_acu_t", this.bufferAccuT);
        putToMap(hashMap, "de_bu_acu_t", this.decoderBufferAccuT);
        putToMap(hashMap, "internal_ip", this.internalIP);
        putToMap(hashMap, "tag", videoEventBase.mTag);
        putToMap(hashMap, "subtag", videoEventBase.mSubTag);
        putToMap(hashMap, "ex", SerialMapToString(this.ex));
        putToMap(hashMap, "mdlretry", this.mMDLRetryList);
        putToMap(hashMap, "first_buf_startt", this.firstBufferStartT);
        putToMap(hashMap, "first_buf_endt", this.firstBufferEndT);
        putToMap(hashMap, "cur_play_pos", this.curPlayBackTime);
        putToMap((Map) hashMap, "engine_state", this.engineState);
        putToMap((Map) hashMap, "video_out_fps", this.curVideoOutputFps);
        putToMap((Map) hashMap, "container_fps", this.containerFps);
        putToMap((Map) hashMap, "video_decoder_fps", this.curVideoDecoderFps);
        putToMap(hashMap, "clock_diff", this.clockDiff);
        putToMap((Map) hashMap, "drop_count", this.dropCount);
        putToMap(hashMap, "video_device_opened_t", this.videoDeviceOpenedTime);
        putToMap(hashMap, "audio_device_opened_t", this.audioDeviceOpenedTime);
        putToMap((Map) hashMap, "finish", this.finish);
        putToMap((Map) hashMap, "is_start_play_automatically", this.isStartPlayAutomatically);
        putToMap(hashMap, "player_create_exception", this.ownPlayerCreateException);
        putToMap(hashMap, "custom_str", this.mCustomStr);
        putToMap(hashMap, "initial_url", this.mInitialURL);
        putToMap(hashMap, "init_audio_url", this.mAudioInitUrl);
        putToMap(hashMap, "initial_host", this.mInitialHost);
        putToMap(hashMap, "initial_ip", this.mInitialIP);
        putToMap(hashMap, "initial_resolution", this.mInitialResolution);
        putToMap(hashMap, "initial_quality", this.mInitialQuality);
        putToMap((Map) hashMap, "apiver", this.apiver);
        putToMap(hashMap, "auth", this.auth);
        putToMap((Map) hashMap, "apiver_final", this.apiverFinal);
        putToMap(hashMap, "playparam", SerialMapToString(this.playbackparams));
        putToMap(hashMap, "vtype", videoEventBase.vtype);
        putToMap(hashMap, "dynamic_type", videoEventBase.dynamic_type);
        putToMap((Map) hashMap, "lc", this.loopcount);
        putToMap((Map) hashMap, "switch_resolution_c", this.switchResolutionCount);
        putToMap((Map) hashMap, "watch_dur", this.watchduration);
        putToMap((Map) hashMap, "sc", this.seekCount);
        putToMap((Map) hashMap, "vid_cache", this.useVideoModelCache);
        putToMap((Map) hashMap, "custom_p2p_cdn_type", this.customP2PCDNType);
        putToMap(hashMap, "p2p_url", this.p2pUrl);
        putToMap(hashMap, "p2p_load_info", this.p2pLoadInfo);
        putToMap((Map) hashMap, "start_time", this.startTime);
        putToMap((Map) hashMap, "disable_accurate_start", this.disableAccurateStart);
        putToMap((Map) hashMap, "audio_codec_nameId", videoEventBase.audioCodecNameId);
        putToMap((Map) hashMap, "video_codec_nameId", videoEventBase.videoCodecNameId);
        putToMap((Map) hashMap, "format_type", videoEventBase.formatType);
        putToMap(hashMap, "surface_set_time", this.surfaceSetTime);
        putToMap(hashMap, "surface_code", this.surfaceCode);
        putToMap((Map) hashMap, "frames_drop_set_num", this.mFramesSetDropNum);
        putToMap(hashMap, "video_device_start_t", this.videoDeviceStartTime);
        putToMap(hashMap, "audio_device_start_t", this.audioDeviceStartTime);
        putToMap((Map) hashMap, "video_length", this.videoBufferLength);
        putToMap((Map) hashMap, "audio_length", this.audioBufferLength);
        putToMap(hashMap, "api_str", this.apiString);
        putToMap(hashMap, "net_client", this.netClient);
        putToMap((Map) hashMap, "fetch_lv", this.fetchedAndLeaveByUser);
        putToMap((Map) hashMap, "volume", this.volume);
        putToMap((Map) hashMap, "core_volume", this.core_volume);
        putToMap((Map) hashMap, "ae_type", this.ae_type);
        putToMap((Map) hashMap, "mute", this.mute);
        putToMap(hashMap, "source_type", videoEventBase.mSourceTypeStr);
        putToMap((Map) hashMap, "sharp", this.enableSharp);
        putToMap(hashMap, "dns_server_ip", this.dns_server_ip);
        putToMap(hashMap, "abr_info", SerialMapToString(videoEventBase.abrInfo));
        putToMap(hashMap, "abr_general_info", SerialMapToString(videoEventBase.abrGeneralInfo));
        putToMap(hashMap, "enc_key", this.encryptKey);
        putToMap(hashMap, "hw_codec_name", this.hwCodecName);
        putToMap((Map) hashMap, "hw_codec_exception", this.hwCodecException);
        putToMap(hashMap, "proxy_url", this.proxy_url);
        putToMap((Map) hashMap, "enable_bash", this.enableBash);
        putToMap((Map) hashMap, "enable_mdl", this.enableMDL);
        putToMap((Map) hashMap, "network_try_count", this.netWorkTryCount);
        putToMap(hashMap, "chipboard", this.chipBoardName);
        putToMap(hashMap, "chiphardware", this.chipHardwareName);
        putToMap((Map) hashMap, "buffer_timeout", this.mBufferTimeout);
        putToMap(hashMap, "dns_start_t", this.dns_start_t);
        putToMap(hashMap, "dns_end_t", this.dns_end_t);
        putToMap(hashMap, "dns_type", videoEventBase.mDNSType);
        putToMap(hashMap, "player_created_t", this.player_created_t);
        putToMap((Map) hashMap, "errt", this.errt);
        putToMap((Map) hashMap, "errc", this.errc);
        putToMap((Map) hashMap, "fir_errt", this.first_errt);
        putToMap((Map) hashMap, "fir_errc", this.first_errc);
        putToMap((Map) hashMap, "fir_errc_in", this.first_errc_internal);
        putToMap((Map) hashMap, "vsc", this.vsc);
        putToMap(hashMap, "vsc_message", this.vscMessage);
        putToMap(hashMap, "vid_info", SerialMapToString(this.vidInfo));
        putToMap(hashMap, "sub_events", SerialMapToString(this.subEvents));
        putToMap(hashMap, "mask_events", SerialMapToString(this.maskEvents));
        putToMap((Map) hashMap, "lv_reason", this.leave_reason);
        putToMap((Map) hashMap, "lv_bt", this.leave_block_t);
        putToMap((Map) hashMap, "lv_method", this.leave_method);
        putToMap((Map) hashMap, "sat", this.seek_accu_t);
        putToMap(hashMap, "lsst", this.lastSeekStartT);
        putToMap(hashMap, "lset", this.lastSeekEndT);
        putToMap(hashMap, "lbst", this.lastBufferStartT);
        putToMap(hashMap, "lbet", this.lastBufferEndT);
        putToMap((Map) hashMap, "lsp", this.lastSeekPosition);
        putToMap(hashMap, "sl_diff", this.server_local_diff);
        putToMap(hashMap, "trace_id", this.traceID);
        putToMap((Map) hashMap, "network_timeout", this.networkTimeout);
        putToMap((Map) hashMap, "is_pref_near_sam", this.isPreferNearestSample);
        putToMap((Map) hashMap, "is_disable_short_seek", this.isDisableShortSeek);
        putToMap((Map) hashMap, "drm_type", videoEventBase.mDrmType);
        putToMap(hashMap, "drm_token_url", videoEventBase.mDrmTokenUrl);
        putToMap((Map) hashMap, "check_hijack", this.checkHijack);
        putToMap((Map) hashMap, "hijack_retry", this.hijackRetry);
        putToMap((Map) hashMap, "first_hijack_code", this.firstHijackCode);
        putToMap((Map) hashMap, "last_hijack_code", this.lastHijackCode);
        putToMap(hashMap, "mdl_loader_type", this.loaderType);
        putToMap(hashMap, "mdl_version", videoEventBase.mMdlVersion);
        putToMap((Map) hashMap, "dns_mod", this.dnsModule);
        putToMap((Map) hashMap, "vd_err", this.curVideoDecodeError);
        putToMap((Map) hashMap, "ad_err", this.curAudioDecodeError);
        putToMap((Map) hashMap, "vr_err", this.curVideoRenderError);
        putToMap(hashMap, "nt", videoEventBase.mNetworkType);
        putToMap(hashMap, "vpls", this.vpls);
        putToMap(hashMap, "d_apls", this.d_apls);
        putToMap(hashMap, "d_vpls", this.d_vpls);
        putToMap((Map) hashMap, "vt_speed", (float) this.firstFrameSpeed);
        putToMap((Map) hashMap, "end_speed", (float) this.playEndSpeed);
        putToMap((Map) hashMap, "mediacodec_render", this.mediaCodecRender);
        putToMap((Map) hashMap, "tr", this.textureRender);
        putToMap((Map) hashMap, "tr_err", this.textureRenderErrorCode);
        putToMap((Map) hashMap, "cp", this.codecPool);
        putToMap(hashMap, "bit_rate", this.bitrate);
        putToMap((Map) hashMap, "cold_start", this.isColdStart);
        putToMap(hashMap, "av_gap", this.videoAudioGap);
        putToMap(hashMap, "moov_pos", this.moovPos);
        putToMap(hashMap, "mdat_pos", this.mdatPos);
        putToMap(hashMap, "frange_size", this.firstRangeSize);
        putToMap(hashMap, "net_speed_level", this.netSpeedLevel);
        putToMap(hashMap, "video_model_version", this.modelVersion);
        putToMap((Map) hashMap, "p2p_play_num", this.p2pStragetyPlayNum);
        putToMap((Map) hashMap, "p2p_min_play_num", this.p2pStragetyMinPlayNum);
        putToMap((Map) hashMap, "p2p_min_speed", this.p2pStragetyMinSpeed);
        putToMap((Map) hashMap, "p2p_probe_speed", this.p2pStragetyProbeSpeed);
        putToMap(hashMap, "prepare_before_play_t", this.prepare_before_play_t);
        putToMap(hashMap, "setds_t", this.setds_t);
        putToMap(hashMap, "ps_t", this.ps_t);
        putToMap(hashMap, "pt_new", this.pt_new);
        putToMap(hashMap, "a_dns_start_t", this.a_dns_start_t);
        putToMap(hashMap, "formater_create_t", this.formater_create_t);
        putToMap(hashMap, "avformat_open_t", this.avformat_open_t);
        putToMap(hashMap, "demuxer_begin_t", this.demuxer_begin_t);
        putToMap(hashMap, "demuxer_create_t", this.demuxer_create_t);
        putToMap(hashMap, "dec_create_t", this.dec_create_t);
        putToMap(hashMap, "outlet_create_t", this.outlet_create_t);
        putToMap(hashMap, "v_render_f_t", this.v_render_f_t);
        putToMap(hashMap, "a_render_f_t", this.a_render_f_t);
        putToMap(hashMap, "a_dec_start_t", this.a_dec_start_t);
        putToMap(hashMap, "v_dec_start_t", this.v_dec_start_t);
        putToMap(hashMap, "a_dec_opened_t", this.a_dec_opened_t);
        putToMap(hashMap, "v_dec_opened_t", this.v_dec_opened_t);
        putToMap((Map) hashMap, "radio_mode", this.mRadioMode);
        putToMap((Map) hashMap, "v_disabled", this.mVideoStreamDisabled ? 1 : 0);
        putToMap((Map) hashMap, "a_disabled", this.mAudioStreamDisabled ? 1 : 0);
        putToMap((Map) hashMap, "is_replay", this.isReplay);
        putToMap(hashMap, "play_log_id", this.log_id);
        putToMap((Map) hashMap, "enable_nnsr", this.mEnableNNSR);
        putToMap((Map) hashMap, "at_r", this.mReadCacheMode);
        putToMap((Map) hashMap, "at_rs", this.mPreRangeOff);
        putToMap((Map) hashMap, "video_codec_profile", this.mVideoCodecProfile);
        putToMap((Map) hashMap, "audio_codec_profile", this.mAudioCodecProfile);
        putToMap(hashMap, "last_sessionid", this.mLastSessionID);
        putToMap(hashMap, "nettype_list", SerialMapToString(this.mNetworkTypeList));
        putToMap(hashMap, "sigstrength_list", SerialMapToString(this.mSignalStrengthList));
        putToMap(hashMap, "netspeed_list", this.mMdlMultiSpeedList);
        putToMap(hashMap, "quality_list", SerialMapToString(this.mQualityList));
        putToMap(hashMap, "bitrate_list", SerialMapToString(this.mBitrateList));
        putToMap(hashMap, "catowerrtt_list", this.mCatowerRttList);
        putToMap(hashMap, "catowerrttms_list", this.mCatowerRttMsList);
        putToMap((Map) hashMap, "netquality_int", this.mNetQualityInterval);
        putToMap(hashMap, "features", SerialMapToString(this.mFeatures));
        putToMap((Map) hashMap, "network_score", this.mNetworkScore);
        putToMap(hashMap, "before_play_buffer_start_t", this.playbackBufferStartT);
        putToMap(hashMap, "before_play_buffer_end_t", this.playbackBufferEndT);
        putToMap(hashMap, "cur_req_pos", videoEventBase.mdlVideoInfo.mdl_cur_req_pos);
        putToMap(hashMap, "cur_end_pos", videoEventBase.mdlVideoInfo.mdl_cur_end_pos);
        putToMap(hashMap, "cur_cache_pos", videoEventBase.mdlVideoInfo.mdl_cur_cache_pos);
        putToMap((Map) hashMap, "cache_type", videoEventBase.mdlVideoInfo.mdl_cache_type);
        putToMap(hashMap, "cur_ip", videoEventBase.mdlVideoInfo.mdl_cur_ip);
        putToMap(hashMap, "cur_host", videoEventBase.mdlVideoInfo.mdl_cur_host);
        putToMap(hashMap, "cur_url", videoEventBase.mdlVideoInfo.mdl_cur_url);
        putToMap(hashMap, "reply_size", videoEventBase.mdlVideoInfo.mdl_reply_size);
        putToMap(hashMap, "down_pos", videoEventBase.mdlVideoInfo.mdl_down_pos);
        putToMap(hashMap, "player_wait_time", videoEventBase.mdlVideoInfo.mdl_player_wait_time);
        putToMap((Map) hashMap, "player_wait_num", videoEventBase.mdlVideoInfo.mdl_player_wait_num);
        putToMap((Map) hashMap, "mdl_speed", videoEventBase.mdlVideoInfo.mdl_speed);
        putToMap(hashMap, "mdl_file_key", videoEventBase.mdlVideoInfo.mdl_file_key);
        putToMap((Map) hashMap, "mdl_is_socrf", videoEventBase.mdlVideoInfo.mdl_is_socrf);
        putToMap((Map) hashMap, "mdl_req_num", videoEventBase.mdlVideoInfo.mdl_req_num);
        putToMap((Map) hashMap, "mdl_url_index", videoEventBase.mdlVideoInfo.mdl_url_index);
        putToMap(hashMap, "mdl_re_url", videoEventBase.mdlVideoInfo.mdl_re_url);
        putToMap((Map) hashMap, "mdl_cur_source", videoEventBase.mdlVideoInfo.mdl_cur_soure);
        putToMap(hashMap, "mdl_extra_info", videoEventBase.mdlVideoInfo.mdl_extra_info);
        putToMap((Map) hashMap, "mdl_ec", videoEventBase.mdlVideoInfo.mdl_error_code);
        putToMap(hashMap, "mdl_fs", videoEventBase.mdlVideoInfo.mdl_fs);
        putToMap((Map) hashMap, "mdl_stage", videoEventBase.mdlVideoInfo.mdl_stage);
        putToMap(hashMap, "req_t", videoEventBase.mdlVideoInfo.mdl_req_t);
        putToMap(hashMap, "end_t", videoEventBase.mdlVideoInfo.mdl_end_t);
        putToMap(hashMap, "mdl_dns_t", videoEventBase.mdlVideoInfo.mdl_dns_t);
        putToMap(hashMap, "tcp_con_start_t", videoEventBase.mdlVideoInfo.mdl_tcp_start_t);
        putToMap(hashMap, "tcp_con_t", videoEventBase.mdlVideoInfo.mdl_tcp_end_t);
        putToMap(hashMap, "tcp_first_pack_t", videoEventBase.mdlVideoInfo.mdl_ttfp);
        putToMap(hashMap, "http_first_body_t", videoEventBase.mdlVideoInfo.mdl_httpfb);
        putToMap(hashMap, "http_open_end_t", videoEventBase.mdlVideoInfo.mdl_http_open_end_t);
        putToMap((Map) hashMap, "http_code", videoEventBase.mdlVideoInfo.mdl_http_code);
        putToMap((Map) hashMap, "mdl_p2p_sp", videoEventBase.mdlVideoInfo.mdl_pcdn_full_speed);
        putToMap((Map) hashMap, "mdl_res_err", videoEventBase.mdlVideoInfo.mdl_res_err);
        putToMap((Map) hashMap, "mdl_read_src", videoEventBase.mdlVideoInfo.mdl_read_src);
        putToMap((Map) hashMap, "mdl_seek_num", videoEventBase.mdlVideoInfo.mdl_seek_num);
        putToMap(hashMap, "mdl_last_msg", videoEventBase.mdlVideoInfo.mdl_last_msg);
        putToMap(hashMap, "mdl_server_timing", videoEventBase.mdlVideoInfo.mdl_server_timing);
        putToMap((Map) hashMap, "mdl_v_lt", videoEventBase.mdlVideoInfo.mdl_v_lt);
        putToMap((Map) hashMap, "mdl_v_p2p_ier", videoEventBase.mdlVideoInfo.mdl_v_p2p_ier);
        putToMap(hashMap, "mdl_ip_list", videoEventBase.mdlVideoInfo.mdl_ip_list);
        putToMap(hashMap, "mdl_blocked_ips", videoEventBase.mdlVideoInfo.mdl_blocked_ips);
        putToMap(hashMap, "mdl_response_cache", videoEventBase.mdlVideoInfo.mdl_cdn_cache);
        putToMap(hashMap, "mdl_response_cinfo", videoEventBase.mdlVideoInfo.mdl_client_info);
        putToMap((Map) hashMap, "mdl_disable_seek", videoEventBase.mdlVideoInfo.mdl_disable_seek);
        putToMap(hashMap, "a_cur_req_pos", videoEventBase.mdlAudioInfo.mdl_cur_req_pos);
        putToMap(hashMap, "a_cur_end_pos", videoEventBase.mdlAudioInfo.mdl_cur_end_pos);
        putToMap(hashMap, "a_cur_cache_pos", videoEventBase.mdlAudioInfo.mdl_cur_cache_pos);
        putToMap((Map) hashMap, "a_cache_type", videoEventBase.mdlAudioInfo.mdl_cache_type);
        putToMap(hashMap, "a_cur_ip", videoEventBase.mdlAudioInfo.mdl_cur_ip);
        putToMap(hashMap, "a_cur_host", videoEventBase.mdlAudioInfo.mdl_cur_host);
        putToMap(hashMap, "a_cur_url", videoEventBase.mdlAudioInfo.mdl_cur_url);
        putToMap(hashMap, "a_reply_size", videoEventBase.mdlAudioInfo.mdl_reply_size);
        putToMap(hashMap, "a_down_pos", videoEventBase.mdlAudioInfo.mdl_down_pos);
        putToMap(hashMap, "a_player_wait_time", videoEventBase.mdlAudioInfo.mdl_player_wait_time);
        putToMap((Map) hashMap, "a_player_wait_num", videoEventBase.mdlAudioInfo.mdl_player_wait_num);
        putToMap((Map) hashMap, "a_mdl_speed", videoEventBase.mdlAudioInfo.mdl_speed);
        putToMap(hashMap, "a_mdl_file_key", videoEventBase.mdlAudioInfo.mdl_file_key);
        putToMap((Map) hashMap, "a_mdl_is_socrf", videoEventBase.mdlAudioInfo.mdl_is_socrf);
        putToMap((Map) hashMap, "a_mdl_req_num", videoEventBase.mdlAudioInfo.mdl_req_num);
        putToMap((Map) hashMap, "a_mdl_url_index", videoEventBase.mdlAudioInfo.mdl_url_index);
        putToMap(hashMap, "a_mdl_re_url", videoEventBase.mdlAudioInfo.mdl_re_url);
        putToMap((Map) hashMap, "a_mdl_cur_source", videoEventBase.mdlAudioInfo.mdl_cur_soure);
        putToMap(hashMap, "a_mdl_extra_info", videoEventBase.mdlAudioInfo.mdl_extra_info);
        putToMap((Map) hashMap, "a_mdl_ec", videoEventBase.mdlAudioInfo.mdl_error_code);
        putToMap(hashMap, "a_mdl_fs", videoEventBase.mdlAudioInfo.mdl_fs);
        putToMap((Map) hashMap, "a_mdl_stage", videoEventBase.mdlAudioInfo.mdl_stage);
        putToMap(hashMap, "a_req_t", videoEventBase.mdlAudioInfo.mdl_req_t);
        putToMap(hashMap, "a_end_t", videoEventBase.mdlAudioInfo.mdl_end_t);
        putToMap(hashMap, "a_mdl_dns_t", videoEventBase.mdlAudioInfo.mdl_dns_t);
        putToMap(hashMap, "a_tcp_con_start_t", videoEventBase.mdlAudioInfo.mdl_tcp_start_t);
        putToMap(hashMap, "a_tcp_con_t", videoEventBase.mdlAudioInfo.mdl_tcp_end_t);
        putToMap(hashMap, "a_tcp_first_pack_t", videoEventBase.mdlAudioInfo.mdl_ttfp);
        putToMap(hashMap, "a_http_first_body_t", videoEventBase.mdlAudioInfo.mdl_httpfb);
        putToMap(hashMap, "a_http_open_end_t", videoEventBase.mdlAudioInfo.mdl_http_open_end_t);
        putToMap((Map) hashMap, "a_http_code", videoEventBase.mdlAudioInfo.mdl_http_code);
        putToMap((Map) hashMap, "a_mdl_res_err", videoEventBase.mdlAudioInfo.mdl_res_err);
        putToMap((Map) hashMap, "a_mdl_read_src", videoEventBase.mdlAudioInfo.mdl_read_src);
        putToMap((Map) hashMap, "a_mdl_seek_num", videoEventBase.mdlAudioInfo.mdl_seek_num);
        putToMap(hashMap, "a_mdl_last_msg", videoEventBase.mdlAudioInfo.mdl_last_msg);
        putToMap(hashMap, "a_mdl_server_timing", videoEventBase.mdlAudioInfo.mdl_server_timing);
        putToMap(hashMap, "a_mdl_ip_list", videoEventBase.mdlAudioInfo.mdl_ip_list);
        putToMap(hashMap, "a_mdl_blocked_ips", videoEventBase.mdlAudioInfo.mdl_blocked_ips);
        putToMap(hashMap, "a_mdl_response_cache", videoEventBase.mdlAudioInfo.mdl_cdn_cache);
        putToMap(hashMap, "a_mdl_response_cinfo", videoEventBase.mdlAudioInfo.mdl_client_info);
        putToMap(hashMap, "custom_click_t", this.mCustomClickT);
        putToMap(hashMap, "custom_vm_t", this.mCustomGetVideoModelT);
        putToMap(hashMap, "custom_init_t", this.mCustomInitEngineT);
        putToMap(hashMap, "custom_play_t", this.mCustomPlayEngineT);
        putToMap((Map) hashMap, "screen_w", this.mScreenWidth);
        putToMap((Map) hashMap, "screen_h", this.mScreenHeight);
        putToMap((Map) hashMap, "p_density", this.mPixelDensity);
        putToMap((Map) hashMap, "sr_w", this.mSrWidthFactor);
        putToMap((Map) hashMap, "sr_h", this.mSrHeightFactor);
        putToMap(hashMap, "eye_filter", this.mVideoFilterList);
        putToMap(hashMap, "bright_list", this.mBrightList);
        putToMap(hashMap, "view_size_list", this.mViewSizeList);
        putToMap(hashMap, "play_list", this.mPlayList);
        putToMap(hashMap, "pause_list", this.mPauseList);
        putToMap(hashMap, "resolution_list", this.mResolutionList);
        putToMap(hashMap, "playspeed_list", this.mPlaySpeedList);
        putToMap(hashMap, "radiomode_list", this.mRadiomodeList);
        putToMap(hashMap, "loop_list", this.mLoopList);
        putToMap(hashMap, "error_list", this.mErrorList);
        putToMap(hashMap, "rebuf_list", this.mRebufList);
        putToMap(hashMap, "seek_list", this.mSeekList);
        putToMap(hashMap, "av_outsync_list", this.mAVOutsyncList);
        putToMap((Map) hashMap, "av_outsync_count", this.mAVOutsyncCount);
        putToMap((Map) hashMap, "color_trc", this.color_trc);
        putToMap(hashMap, "headset_list", this.mHeadsetStateList);
        putToMap((Map) hashMap, "hw_conf_type", this.mHardwareConfType);
        putToMap(hashMap, "no_a_list", this.mNoAudioRenderList);
        putToMap(hashMap, "no_v_list", this.mNoVideoRenderList);
        putToMap((Map) hashMap, "is_reuse_engine", this.mIsEngineReuse ? 1 : 0);
        putToMap(hashMap, "v_duration", this.mVideoStreamDuration);
        putToMap(hashMap, "a_duration", this.mAudioStreamDuration);
        putToMap((Map) hashMap, "view_hidden", this.mIsViewHidden);
        putToMap(hashMap, "power", this.mPowerList);
        putToMap(hashMap, "is_charging", this.mChargingList);
        putToMap(hashMap, "foreback_switch_list", this.mForebackSwitchList);
        putToMap(hashMap, "bad_interlaced_list", this.mAVBadInterlacedList);
        TTVideoEngineLog.m256505i("VideoEventOnePlay", "play_time:" + this.pt + ", pt_new:" + this.pt_new + ",ps_t:" + this.ps_t + ", vv_time:" + this.vt + ", lwp_time:" + this.lt + ", outsync count:" + this.mAVOutsyncCount + ", outsync list:" + this.mAVOutsyncList + ", vs:" + videoEventBase.vs + ", vtype:" + videoEventBase.vtype + ", cur_url:" + videoEventBase.mdlVideoInfo.mdl_cur_url + ", features:" + this.mFeatures + ", exception:" + this.ownPlayerCreateException);
        StringBuilder sb = new StringBuilder();
        sb.append("no_a_list: ");
        sb.append(this.mNoAudioRenderList);
        sb.append(", no_v_list: ");
        sb.append(this.mNoVideoRenderList);
        TTVideoEngineLog.m256500d("VideoEventOnePlay", sb.toString());
        return new JSONObject(hashMap);
    }

    VideoEventOnePlay() {
        this.prepare_before_play_t = -2147483648L;
        this.setds_t = -2147483648L;
        this.ps_t = -2147483648L;
        this.pt_new = -2147483648L;
        this.a_dns_start_t = -2147483648L;
        this.formater_create_t = -2147483648L;
        this.avformat_open_t = -2147483648L;
        this.demuxer_create_t = -2147483648L;
        this.demuxer_begin_t = -2147483648L;
        this.dec_create_t = -2147483648L;
        this.outlet_create_t = -2147483648L;
        this.v_render_f_t = -2147483648L;
        this.a_render_f_t = -2147483648L;
        this.a_dec_start_t = -2147483648L;
        this.v_dec_start_t = -2147483648L;
        this.a_dec_opened_t = -2147483648L;
        this.v_dec_opened_t = -2147483648L;
        this.pt = -2147483648L;
        this.at = -2147483648L;
        this.prepare_start_time = -2147483648L;
        this.prepare_end_time = -2147483648L;
        this.player_prepared_time = -2147483648L;
        this.vt = -2147483648L;
        this.et = -2147483648L;
        this.lt = -2147483648L;
        this.bft = -2147483648L;
        this.bc = Integer.MIN_VALUE;
        this.br = Integer.MIN_VALUE;
        this.vu = new ArrayList();
        this.vps = Integer.MIN_VALUE;
        this.vds = Integer.MIN_VALUE;
        this.width = Integer.MIN_VALUE;
        this.height = Integer.MIN_VALUE;
        this.video_preload_size = Integer.MIN_VALUE;
        this.df = "";
        this.lf = "";
        this.errt = Integer.MIN_VALUE;
        this.errc = Integer.MIN_VALUE;
        this.first_errt = Integer.MIN_VALUE;
        this.first_errc = Integer.MIN_VALUE;
        this.first_errc_internal = Integer.MIN_VALUE;
        this.vsc = Integer.MIN_VALUE;
        this.vscMessage = "";
        this.mCustomStr = "";
        this.mInitialURL = "";
        this.mAudioInitUrl = "";
        this.mInitialHost = "";
        this.mInitialIP = "";
        this.mInitialResolution = "";
        this.mInitialQuality = "";
        this.merror = null;
        this.hijack = Integer.MIN_VALUE;
        this.pluginException = Integer.MIN_VALUE;
        this.ownPlayerCreateException = "";
        this.isStartPlayAutomatically = Integer.MIN_VALUE;
        this.bufferSeconds = Integer.MIN_VALUE;
        this.ex = null;
        this.dnsT = -2147483648L;
        this.tranConnectT = -2147483648L;
        this.httpResponseT = -2147483648L;
        this.tranFirstPacketT = -2147483648L;
        this.audioDnsT = -2147483648L;
        this.audioTranConnectT = -2147483648L;
        this.audioTranFirstPacketT = -2147483648L;
        this.receiveFirstVideoFrameT = -2147483648L;
        this.receiveFirstAudioFrameT = -2147483648L;
        this.decodeFirstVideoFrameT = -2147483648L;
        this.decodeFirstAudioFrameT = -2147483648L;
        this.firstBufferStartT = -2147483648L;
        this.firstBufferEndT = -2147483648L;
        this.curPlayBackTime = -2147483648L;
        this.curVideoOutputFps = Float.MIN_VALUE;
        this.containerFps = Float.MIN_VALUE;
        this.clockDiff = -2147483648L;
        this.dropCount = Integer.MIN_VALUE;
        this.videoDeviceStartTime = -2147483648L;
        this.videoDeviceOpenedTime = -2147483648L;
        this.audioDeviceStartTime = -2147483648L;
        this.audioDeviceOpenedTime = -2147483648L;
        this.surfaceSetTime = -2147483648L;
        this.surfaceCode = "";
        this.mFramesSetDropNum = Integer.MIN_VALUE;
        this.engineState = Integer.MIN_VALUE;
        this.finish = Integer.MIN_VALUE;
        this.internalIP = "";
        this.loaderType = "";
        this.apiver = Integer.MIN_VALUE;
        this.apiverFinal = Integer.MIN_VALUE;
        this.auth = "";
        this.playbackparams = null;
        this.loopcount = Integer.MIN_VALUE;
        this.switchResolutionCount = Integer.MIN_VALUE;
        this.watchduration = Integer.MIN_VALUE;
        this.useVideoModelCache = Integer.MIN_VALUE;
        this.startTime = Integer.MIN_VALUE;
        this.disableAccurateStart = Integer.MIN_VALUE;
        this.customP2PCDNType = Integer.MIN_VALUE;
        this.asyncInit = Integer.MIN_VALUE;
        this.p2pUrl = "";
        this.p2pLoadInfo = "";
        this.bufferAccuT = -2147483648L;
        this.decoderBufferAccuT = -2147483648L;
        this.videoBufferLength = Integer.MIN_VALUE;
        this.audioBufferLength = Integer.MIN_VALUE;
        this.seekCount = Integer.MIN_VALUE;
        this.render_type = "";
        this.proxy_url = "";
        this.apiString = "";
        this.netClient = "";
        this.fetchedAndLeaveByUser = Integer.MIN_VALUE;
        this.volume = Integer.MIN_VALUE;
        this.core_volume = Integer.MIN_VALUE;
        this.mute = Integer.MIN_VALUE;
        this.enableBash = Integer.MIN_VALUE;
        this.enableMDL = Integer.MIN_VALUE;
        this.asyncCodecId = Integer.MIN_VALUE;
        this.enableSharp = Integer.MIN_VALUE;
        this.ae_type = Integer.MIN_VALUE;
        this.curVideoDecoderFps = Integer.MIN_VALUE;
        this.hwCodecName = "";
        this.hwCodecException = Integer.MIN_VALUE;
        this.netWorkTryCount = Integer.MIN_VALUE;
        this.chipBoardName = "";
        this.chipHardwareName = "";
        this.mBufferTimeout = Integer.MIN_VALUE;
        this.networkTimeout = Integer.MIN_VALUE;
        this.isPreferNearestSample = Integer.MIN_VALUE;
        this.isDisableShortSeek = Integer.MIN_VALUE;
        this.dns_start_t = -2147483648L;
        this.dns_end_t = -2147483648L;
        this.player_created_t = -2147483648L;
        this.leave_reason = IByteRtcError.BRERR_NO_PUBLISH_PERMISSION;
        this.leave_block_t = Integer.MIN_VALUE;
        this.leave_method = Integer.MIN_VALUE;
        this.seek_accu_t = Integer.MIN_VALUE;
        this.lastSeekStartT = -2147483648L;
        this.lastSeekEndT = -2147483648L;
        this.lastBufferStartT = -2147483648L;
        this.lastBufferEndT = -2147483648L;
        this.lastResolutionStartT = -2147483648L;
        this.lastResolutionEndT = -2147483648L;
        this.lastSeekPosition = Integer.MIN_VALUE;
        this.server_local_diff = -2147483648L;
        this.traceID = null;
        this.checkHijack = -1;
        this.hijackRetry = -1;
        this.firstHijackCode = -1;
        this.lastHijackCode = -1;
        this.playPreparedT = -2147483648L;
        this.playStartedT = -2147483648L;
        this.curVideoDecodeError = Integer.MIN_VALUE;
        this.curAudioDecodeError = Integer.MIN_VALUE;
        this.curVideoRenderError = Integer.MIN_VALUE;
        this.dnsModule = Integer.MIN_VALUE;
        this.vpls = 0;
        this.d_vpls = 0;
        this.d_apls = 0;
        this.firstFrameSpeed = -2.147483648E9d;
        this.playEndSpeed = -2.147483648E9d;
        this.mediaCodecRender = Integer.MIN_VALUE;
        this.textureRender = Integer.MIN_VALUE;
        this.textureRenderErrorMsg = "";
        this.textureRenderErrorCode = Integer.MIN_VALUE;
        this.codecPool = Integer.MIN_VALUE;
        this.playbackBufferStartT = -2147483648L;
        this.playbackBufferEndT = -2147483648L;
        this.bitrate = 0;
        this.isColdStart = 0;
        this.videoAudioGap = 0;
        this.moovPos = 0;
        this.mdatPos = 0;
        this.firstRangeSize = 0;
        this.netSpeedLevel = 0;
        this.modelVersion = 0;
        this.mVideoHWErrReason = Integer.MIN_VALUE;
        this.playerFirstFrameT = -2147483648L;
        this.p2pStragetyMinPlayNum = Integer.MIN_VALUE;
        this.p2pStragetyPlayNum = Integer.MIN_VALUE;
        this.p2pStragetyMinSpeed = Integer.MIN_VALUE;
        this.p2pStragetyProbeSpeed = Integer.MIN_VALUE;
        this.mRadioMode = 0;
        this.mVideoStreamDisabled = false;
        this.mAudioStreamDisabled = false;
        this.isReplay = 0;
        this.mEnableNNSR = 0;
        this.mPreRangeOff = 0;
        this.mReadCacheMode = 0;
        this.mSessionID = "";
        this.log_id = "";
        this.mLastSessionID = "";
        this.mVideoCodecProfile = Integer.MIN_VALUE;
        this.mAudioCodecProfile = Integer.MIN_VALUE;
        this.mVideoStreamDuration = -2147483648L;
        this.mAudioStreamDuration = -2147483648L;
        this.mNetworkTypeList = null;
        this.mSignalStrengthList = null;
        this.mMdlMultiSpeedList = null;
        this.mQualityList = null;
        this.mBitrateList = null;
        this.mCatowerRttList = null;
        this.mCatowerRttMsList = null;
        this.mNetQualityInterval = -1;
        this.mNetQualityIndex = 0;
        this.mNetworkScore = -1;
        this.mFeatures = null;
        this.mCustomClickT = -2147483648L;
        this.mCustomGetVideoModelT = -2147483648L;
        this.mCustomPlayT = -2147483648L;
        this.mCustomInitEngineT = -2147483648L;
        this.mCustomPlayEngineT = -2147483648L;
        this.mPlayList = null;
        this.mPauseList = null;
        this.mResolutionList = null;
        this.mPlaySpeedList = null;
        this.mRadiomodeList = null;
        this.mLoopList = null;
        this.mErrorList = null;
        this.mRebufList = null;
        this.mSeekList = null;
        this.mAVOutsyncList = null;
        this.mHeadsetStateList = null;
        this.mNoVideoRenderList = null;
        this.mNoAudioRenderList = null;
        this.mPowerList = null;
        this.mChargingList = null;
        this.mAVBadInterlacedList = null;
        this.mForebackSwitchList = null;
        this.mAVOutsyncCount = Integer.MIN_VALUE;
        this.sub_req_finish_t = -2147483648L;
        this.sub_load_finish_t = -2147483648L;
        this.mask_open_t = -2147483648L;
        this.mask_opened_t = -2147483648L;
        this.maskErrc = Integer.MIN_VALUE;
        this.enableSub = Integer.MIN_VALUE;
        this.enableSubThread = Integer.MIN_VALUE;
        this.enableMask = Integer.MIN_VALUE;
        this.enableMaskThread = Integer.MIN_VALUE;
        this.subLanSwichCount = Integer.MIN_VALUE;
        this.subIdsCount = Integer.MIN_VALUE;
        this.mMaskURL = "";
        this.mSubReqURL = "";
        this.mSubError = "";
        this.color_trc = Integer.MIN_VALUE;
        this.mHardwareConfType = -1;
        this.mScreenWidth = Integer.MIN_VALUE;
        this.mScreenHeight = Integer.MIN_VALUE;
        this.mPixelDensity = Integer.MIN_VALUE;
        this.mSrWidthFactor = Float.MIN_VALUE;
        this.mSrHeightFactor = Float.MIN_VALUE;
        this.mVideoFilterList = null;
        this.mBrightList = null;
        this.mViewSizeList = null;
        this.mMDLRetryList = null;
        this.mIsEngineReuse = false;
        this.mIsViewHidden = Integer.MIN_VALUE;
        this.mBitrateList = new LinkedHashMap();
        this.mQualityList = new LinkedHashMap();
        this.mCatowerRttList = new ArrayList<>();
        this.mCatowerRttMsList = new ArrayList<>();
        this.mMdlMultiSpeedList = new ArrayList<>();
        this.mNetworkTypeList = new LinkedHashMap();
        this.mSignalStrengthList = new LinkedHashMap();
        this.mFeatures = new HashMap();
    }

    private String SerialMapToString(Map map) {
        if (map == null) {
            return null;
        }
        try {
            if (!map.isEmpty()) {
                return new JSONObject(map).toString();
            }
            return null;
        } catch (Exception e) {
            TTVideoEngineLog.m256503e("VideoEventOnePlay", e.toString() + ", :" + map);
            return null;
        }
    }

    private void parseLeaveReason(VideoEventBase videoEventBase) {
        if (videoEventBase.mSourceTypeStr.equals("vid") && this.at <= 0) {
            this.leave_reason = IByteRtcError.BRERR_NO_PUBLISH_PERMISSION;
        }
        if (this.dns_end_t <= 0 && this.audioDnsT <= 0 && !videoEventBase.mSourceTypeStr.equals("local_url")) {
            this.leave_reason = IByteRtcError.BRRERR_DUPLICATE_LOGIN;
        } else if (this.prepare_start_time <= 0) {
            this.leave_reason = IByteRtcError.BRERR_NO_SUBSCRIBE_PERMISSION;
        } else if (this.formater_create_t <= 0) {
            this.leave_reason = -1006;
        } else if (this.demuxer_begin_t <= 0) {
            this.leave_reason = -1007;
        } else if (this.tranConnectT <= 0) {
            this.leave_reason = -1008;
        } else if (this.tranFirstPacketT <= 0) {
            this.leave_reason = -1009;
        } else if (this.avformat_open_t <= 0) {
            this.leave_reason = IByteRtcError.BRERR_INVALID_SDP;
        } else if (this.demuxer_create_t <= 0) {
            this.leave_reason = -1011;
        } else if (this.dec_create_t <= 0) {
            this.leave_reason = -1012;
        } else {
            int i = this.mRadioMode;
            if (i == 0 && this.v_dec_opened_t <= 0) {
                this.leave_reason = -1014;
            } else if (this.a_dec_opened_t <= 0) {
                this.leave_reason = -1015;
            } else if (this.outlet_create_t <= 0) {
                this.leave_reason = -1013;
            } else if (i != 0 || this.videoDeviceOpenedTime > 0) {
                if (this.audioDeviceOpenedTime <= 0) {
                    this.leave_reason = -1017;
                } else if (i == 0 && this.receiveFirstVideoFrameT <= 0) {
                    this.leave_reason = -1018;
                } else if (this.receiveFirstAudioFrameT <= 0) {
                    this.leave_reason = -1019;
                } else if (i == 0 && this.decodeFirstVideoFrameT <= 0) {
                    this.leave_reason = IByteRtcError.BRERR_ADM_INIT_FAILE;
                } else if (this.decodeFirstAudioFrameT <= 0) {
                    this.leave_reason = IByteRtcError.BRERR_START_CALL;
                } else if (i == 0 && this.v_render_f_t <= 0) {
                    this.leave_reason = IByteRtcError.BRERR_ADM_NO_PERMISSION;
                } else if (this.a_render_f_t <= 0) {
                    this.leave_reason = -1023;
                } else {
                    this.leave_reason = -1024;
                }
            } else if (this.surfaceSetTime <= 0) {
                this.leave_reason = -1025;
            } else {
                this.leave_reason = -1016;
            }
        }
    }

    public static void putToMap(Map map, String str, float f) {
        if (f != Float.MIN_VALUE) {
            map.put(str, Float.valueOf(f));
        }
    }

    public static void putToMap(Map map, String str, int i) {
        if (i != Integer.MIN_VALUE) {
            map.put(str, Integer.valueOf(i));
        }
    }

    public static void putToMap(Map map, String str, long j) {
        if (j != -2147483648L) {
            map.put(str, Long.valueOf(j));
        }
    }

    public static void putToMap(Map map, String str, String str2) {
        if (!TextUtils.isEmpty(str2)) {
            map.put(str, str2);
        }
    }

    public static void putToMap(Map map, String str, ArrayList arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            map.put(str, arrayList);
        }
    }

    public static void putToMap(Map map, String str, Map map2) {
        if (map2 != null && !map2.isEmpty()) {
            map.put(str, map2);
        }
    }
}
